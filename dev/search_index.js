var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = fluxome","category":"page"},{"location":"#fluxome","page":"Home","title":"fluxome","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for fluxome.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [fluxome]","category":"page"},{"location":"#fluxome.ReactionNetworkSimulation","page":"Home","title":"fluxome.ReactionNetworkSimulation","text":"ReactionNetworkSimulation(rn::ReactionSystem, reportpath::String, u0::Vector{Float64}, tspan::Tuple{Float64, Float64})\n\nA composite type representing a reaction network, its initial state, time span, and report path for storing results.\n\nFields\n\nrn::ReactionSystem: The reaction network defined as a Catalyst.jl ReactionSystem.\nreportpath::String: The path where simulation results will be saved.\nu0::Vector{Float64}: The initial state of the system.\ntspan::Tuple{Float64, Float64}: The time span for the simulation.\n\nExamples\n\nusing fluxome\n\n# Define the reaction network and the report path\nrn = @reaction_network begin\n    σ, 0 --> A\n    d, A --> 0\nend σ d;\nreportpath = \"reports/immigrationdeath/\";\n\n# Initialize the ReactionNetworkSimulation\nu0 = zeros(50);\nu0[1] = 1.0;\ntspan = (0, 10.0);\nnetwork = ReactionNetworkSimulation(rn, reportpath, u0, tspan);\nsetup_reaction_network_reports(network);\n\n# Save the graph\nsave_reaction_network_graph(network, \"immigrationdeath_network_petri_graph.pdf\")\n\n# Simulate the network\nps = [10.0, 1.0];\nsol = simulate_reaction_network(network, ps);\n\n# Plot and save the distributions at different time points\nplot_and_save_distribution_timepoint(sol, network, 3, \"0_001\")\nplot_and_save_distribution_timepoint(sol, network, 12, \"0_3\")\n\n# output\n\n\n\n\n\n\n","category":"type"},{"location":"#fluxome.plot_and_save_distribution_timepoint-Tuple{Any, ReactionNetworkSimulation, Int64, String}","page":"Home","title":"fluxome.plot_and_save_distribution_timepoint","text":"plotandsavedistributiontimepoint(sol, rn::ReactionNetwork, tidx::Int, filename_suffix::String)\n\nPlot and save the distribution at a specific time index tidx for the given solution sol and reaction network rn. The plot is saved with a filename suffix filename_suffix.\n\nArguments sol: The solution of the simulation. rn::ReactionNetwork: The reaction network. tidx::Int: The time index for the distribution to plot. filename_suffix::String: The filename suffix for the saved plot.\n\n\n\n\n\n","category":"method"},{"location":"#fluxome.save_reaction_network_graph-Tuple{ReactionNetworkSimulation, String}","page":"Home","title":"fluxome.save_reaction_network_graph","text":"savereactionnetwork_graph(rn::ReactionNetwork, filename::String)\n\nSave the graph representation of the given reaction network rn with the specified filename filename.\n\n\n\n\n\n","category":"method"},{"location":"#fluxome.setup_reaction_network_reports-Tuple{ReactionNetworkSimulation}","page":"Home","title":"fluxome.setup_reaction_network_reports","text":"setup_reaction_network_reports(rn::ReactionNetworkSimulation)\n\nCreate the report directory for a given ReactionNetworkSimulation instance.\n\nThis function creates a directory at the specified reportpath of the ReactionNetworkSimulation instance if it does not already exist.\n\nArguments\n\nrn::ReactionNetworkSimulation: The ReactionNetworkSimulation instance for which the report directory needs to be created.\n\n\n\n\n\n","category":"method"},{"location":"#fluxome.simulate_reaction_network-Tuple{ReactionNetworkSimulation, Vector{Float64}}","page":"Home","title":"fluxome.simulate_reaction_network","text":"simulatereactionnetwork(rn::ReactionNetworkSimulation, p::Vector{Float64})\n\nSimulate a given reaction network rn with parameters p.\n\nArguments\n\nrn::ReactionNetworkSimulation: The reaction network to simulate. p::Vector{Float64}: The parameters of the reaction network.\n\nReturns\n\nsol: The solution of the simulation.\n\n\n\n\n\n","category":"method"}]
}
